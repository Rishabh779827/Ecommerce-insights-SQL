**Query to get the whole details of user by his addrid .
select address.addrid , address.name, address.city ,deliver_to.orderNumber,contain.itemid,orderitem.pid,product.name
from address join deliver_to
on address.addrid = deliver_to.addrid
join contain on deliver_to.orderNumber = contain.orderNumber
join orderitem on contain.itemid = orderitem.itemid 
join product on orderitem.itemid = product.pid
where address.addrid = 1 


**query the information of laptops
SELECT * FROM Product
WHERE type='laptop';

**Query to get the brand and there products 
select brand , group_concat(name) as products
from product 
group by brand;


**Query the address, starttime and endtime of the servicepoints in the same city as userid 5   
SELECT streetaddr,starttime,endtime
FROM ServicePoint
WHERE ServicePoint.city IN (SELECT Address.city FROM Address WHERE userid=5);

**Query to get the details of userid who has product in there cart and have credit card so whenever we had an offer on credit card we can send them a notification 
select c.userid from save_to_shopping_cart s 
inner join creditcard c on s.userid = c.userid ;

**Query to update the payment status of those who has make the payment
update orders join payment on orders.orderNumber = payment.orderNumber 
set orders.paymentState = 'Paid'
where payment.orderNumber is not null;

**Query the total quantity of products from store with storeid 8 in the shopping cart
SELECT SUM(quantity) AS totalQuantity
FROM Save_to_Shopping_Cart
WHERE Save_to_Shopping_Cart.pid IN (SELECT Product.pid FROM Product WHERE sid=8);


**Query the name and address of orders delivered on 2017-02-17 
SELECT name, streetaddr, city
FROM Address
WHERE addrid IN (SELECT addrid FROM Deliver_To WHERE TimeDelivered = '2017-02-17');

**Create view of all products whose price above average price.

CREATE VIEW Products_Above_Average_Price AS
SELECT pid, name, price 
FROM Product
WHERE price > (SELECT AVG(price) FROM Product);

select * from products_above_average_price;

**Create view of all products sales in 2016.
CREATE VIEW Product_Sales_For_2016 AS
SELECT pid, name, price
FROM Product
WHERE pid IN (SELECT pid FROM OrderItem WHERE itemid IN 
              (SELECT itemid FROM Contain WHERE orderNumber IN
               (SELECT orderNumber FROM Payment WHERE payTime > '2016-01-01' AND payTime < '2016-12-31')
              )
             );

**Query to delete the store which opens before year 2017

DELETE FROM save_to_shopping_cart
WHERE addTime < '2017-01-01';
